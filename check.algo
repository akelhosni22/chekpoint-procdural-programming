PROCEDURE Dot product(int vect_A[], int vect_B[])

VAR

( int vect_A  ( * )
  ; integer vect_B ( * )
; integer value length
 ) ;
    
    
BEGIN
      INTEGER product ;
      product := 0;
     for (int i = 0; i < n; i++)
      product = product + vect_A[i] * vect_B[i];

END
     integerDotProduct ;

ALGORITHM
    dotProduct = function (vect_A, vect_B) {
        var product = 0;
        for (var i = 0; i < GFG.n; i++) {
            product = product + vect_A[i] * vect_B[i];
        }
        return product;
    };
    crossProduct = function (vect_A, vect_B, cross_P) {
        cross_P[0] = vect_A[1] * vect_B[2] - vect_A[2] * vect_B[1];
        cross_P[1] = vect_A[2] * vect_B[0] - vect_A[0] * vect_B[2];
        cross_P[2] = vect_A[0] * vect_B[1] - vect_A[1] * vect_B[0];
    };
    main = function (args) {
        var vect_A = [3, -5, 4];
        var vect_B = [2, 6, 5];
        var cross_P = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; });
        
        console.info(dotProduct(vect_A, vect_B));
        
        crossProduct(vect_A, vect_B, cross_P);
        for (var i = 0; i < GFG.n; i++) {
            console.info(cross_P[i] + " ");
        }
    
    